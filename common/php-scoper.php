<?php
declare(strict_types=1);

use Isolated\Symfony\Component\Finder\Finder;
//use Symfony\Component\Finder\Finder;

// Obtain original namespace (must be the first entry in autoload.psr-4)
$composerJson = json_decode(file_get_contents('composer.json'), true);
$psr4 = array_keys($composerJson['autoload']['psr-4'])[0];

// Obtain stubs generated by grunt task "php:scope"
$stubsJson = json_decode(file_get_contents('php-scoper.php.json'), true);

// Whitelist all available monorepo-plugins
$whiteListPlugins = glob('../../../*', GLOB_ONLYDIR);
foreach ($whiteListPlugins as $key => $plugin) {
    $composerJson = json_decode(file_get_contents($plugin . '/composer.json'), true);
    $whiteListPlugins[$key] = array_keys($composerJson['autoload']['psr-4'])[0] . '*';
}

return [
    'prefix' => $psr4 . 'Vendor',
    'finders' => [
        Finder::create()
            ->files()
            ->in('inc'),
        Finder::create()
            ->files()
            ->notName('/LICENSE|.*\\.md|.*\\.dist|Makefile|composer\\.json|composer\\.lock/')
            ->exclude(['doc', 'test', 'test_old', 'tests', 'Tests', 'vendor-bin'])
            ->in('vendor'),
        Finder::create()->append(['composer.json'])
    ],
    'patchers' => [
        function ($filePath, $prefix, $content) use ($stubsJson) {
            $prefixDoubleSlashed = str_replace('\\', '\\\\', $prefix);
            $quotes = ['\'', '"', '`'];

            foreach ($stubsJson as $identifier) {
                $identifierDoubleSlashed = str_replace('\\', '\\\\', $identifier);
                $content = str_replace($prefix . '\\' . $identifier, $identifier, $content); // "PREFIX\foo()", or "foo extends nativeClass"

                // Replace in strings, e. g.  "if( function_exists('PREFIX\\foo') )"
                foreach ($quotes as $quote) {
                    $content = str_replace(
                        $quote . $prefixDoubleSlashed . '\\\\' . $identifierDoubleSlashed . $quote,
                        $quote . $identifierDoubleSlashed . $quote,
                        $content
                    );
                }
            }
            return $content;
        }
    ],
    'whitelist' => $whiteListPlugins,
    'whitelist-global-constants' => true,
    'whitelist-global-classes' => false,
    'whitelist-global-functions' => false
];
